#!/bin/bash
set -e

if [ "$EUID" == 0 ]; then
	echo "Do not run this script as root"
	exit 1
fi

# See: https://stafwag.github.io/blog/blog/2019/03/03/howto-use-centos-cloud-images-with-cloud-init/
# See: https://github.com/giovtorres/kvm-install-vm/blob/master/kvm-install-vm
# See: https://cloudinit.readthedocs.io/en/latest/index.html

HERE=$(dirname "$(readlink -f "$0")")
ROOT=$(readlink -f "$HERE/..")
. "$ROOT/configuration/environment"
. "$ROOT/utils/functions"

NAME=$1
DISK_SIZE=$2
BASE=$3
BASE_IMAGE=$4

Q_NAME=$(q "$NAME")
Q_DISK_SIZE=$(q "$DISK_SIZE")
Q_BASE=$(q "$BASE")

m "[hypervisor] Ensuring keypair for virtual machine \"$NAME\" exists"
"$ROOT/utils/ensure-ssh-key-exists" "stack@$NAME"
"$HERE/rsync" \
	"$KEYS_ROOT/stack@$NAME" \
	"$KEYS_ROOT/stack@$NAME.pub" \
	hypervisor-stack:keys/
"$HERE/ssh" hypervisor-stack "chmod --recursive go-rwx keys/"

VIRT_INSTALL=$(command_line_ini "$ROOT/configuration/libvirt/virt-install/$NAME.ini")
CLOUD_CONFIG=$(< "$ROOT/configuration/libvirt/cloud-init/$NAME.yaml")
PASSWORD=$("$ROOT/utils/get-password" "stack@$NAME")
KEY=$(< "$KEYS_ROOT/stack@$NAME.pub")

"$HERE/ssh" -t hypervisor-stack "$(cat <<- EOT

	set -e
	GREEN='\033[0;32m'
	RESET='\033[0m'
	function m () { echo -e "\$GREEN\$1\$RESET"; }

	if ! virsh domstate $Q_NAME 2> /dev/null; then
		if [ ! -f "\$HOME/libvirt/images/$Q_NAME.qcow2" ]; then
			if [ ! -f "\$HOME/libvirt/images/$Q_BASE.qcow2" ]; then
				m "[hypervisor] Downloading base image: \"\$HOME/libvirt/images/$Q_BASE.qcow2\""
				mkdir --parents "\$HOME/libvirt/images/"
				wget --output-document="\$HOME/libvirt/images/$Q_BASE.qcow2" $(c "$BASE_IMAGE")
			fi

			m "[hypervisor] Creating virtual machine disk image: \"\$HOME/libvirt/images/$Q_NAME.qcow2\" ($Q_DISK_SIZE)"
			cp "\$HOME/libvirt/images/$Q_BASE.qcow2" "\$HOME/libvirt/images/$Q_NAME.qcow2"
			qemu-img resize "\$HOME/libvirt/images/$Q_NAME.qcow2" $Q_DISK_SIZE
		fi

		if [ ! -f "\$HOME/libvirt/images/$Q_NAME-cloud-init.iso" ]; then
			m "[hypervisor] Creating cloud-init configuration disk image: "\$HOME/libvirt/images/$Q_NAME-cloud-init.iso""
			CLOUD_INIT="\$HOME/libvirt/images/.${Q_NAME}_cloud-init.yaml"

			echo $(c "$CLOUD_CONFIG") | \
				NAMESERVER=$(qc "$NAMESERVER") \
				TIMEZONE=$(qc "$TIMEZONE") \
				PASSWORD=$(qc "$PASSWORD") \
				KEY=$(qc "$KEY") \
			envsubst > "\$CLOUD_INIT"

			cloud-localds "\$HOME/libvirt/images/$Q_NAME-cloud-init.iso" "\$CLOUD_INIT"
		fi

		m "[hypervisor] Creating virtual machine $Q_NAME"
		virt-install \
			$VIRT_INSTALL \
			--name $Q_NAME \
			--disk "\$HOME/libvirt/images/$Q_NAME-cloud-init.iso,device=cdrom"
	fi

	m "[hypervisor] Ensuring virtual machine $Q_NAME will autostart"
	virsh autostart --domain $Q_NAME

	m "[hypervisor] Ejecting cloud-init disk from $Q_NAME virtual machine"
	virsh change-media $Q_NAME hda --eject --config || true

EOT
)"

while true; do
	m "[hypervisor] Waiting for virtual machine \"$NAME\" to have an IP address..."

	ADDR=$("$HERE/ssh" hypervisor-stack "$(cat <<- EOT
		set -e
		virsh domifaddr "$NAME" --interface eth0 --source agent 2> /dev/null | \
			tail --lines=+3 | \
			head --lines=-1 | \
			awk '{ split(\$4,a,"/"); print \$3 "=" a[1] }'
	EOT
	)")

	if [ "$ADDR" != 'N/A=N' ]; then
		eval "$ADDR"
		if [ -n "$ipv4" ]; then
			break
		fi
	fi

	sleep 1
done

# Give it some time to fully come up
sleep 5

m "[$NAME] Ensuring keypair authorization for user \"stack\""
"$ROOT/utils/ensure-ssh-config" "$NAME-stack" "$ipv4" stack "stack@$NAME" hypervisor-stack
