#!/bin/bash
set -e

if [ "$EUID" == 0 ]; then
	echo "Do not run this script as root"
	exit 1
fi

HERE=$(dirname "$(readlink -f "$0")")
ROOT=$(readlink -f "$HERE/..")
. "$ROOT/configuration/environment"
. "$ROOT/utils/functions"
. "$ROOT/utils/trap"

if [ "$1" == '-c' ]; then
	"$HERE/clean"
fi

EQ_HYPERVISOR_OPENSTACK_CONTROL_PLANE_INTERFACE=$(eq "$HYPERVISOR_OPENSTACK_CONTROL_PLANE_INTERFACE")
C_HYPERVISOR_OPENSTACK_CONTROL_PLANE_INTERFACE=$(c "$HYPERVISOR_OPENSTACK_CONTROL_PLANE_INTERFACE")

m '[hypervisor-root] Ensuring keypair authorization for user "root" (you will be prompted for password if not)'
"$ROOT/utils/ensure-ssh-key-authorized" root@hypervisor \
ssh "root@$HYPERVISOR_IP_ADDRESS"

"$ROOT/utils/ensure-ssh-config" hypervisor-root "$HYPERVISOR_IP_ADDRESS" root root@hypervisor

PASSWORD=$("$ROOT/utils/get-password" hypervisor@hypervisor)

"$ROOT/rsync" --recursive \
	--rsync-path='mkdir --parents libvirt/ && rsync' \
	"$ROOT/configuration/libvirt/networks" \
	hypervisor-root:libvirt/

"$ROOT/ssh" hypervisor-root "$(cat <<- EOT

	set -e
	CYAN='\033[0;36m'
	RESET='\033[0m'
	function m () { echo -e "\$CYAN\$1\$RESET"; }

	m "[hypervisor-root] Ensuring timezone is \"$TIMEZONE\""
	timedatectl set-timezone $(c "$TIMEZONE")

	m '[hypervisor-root] Ensuring libvirt and related packages are installed'
	# Note: "centos-release-qemu-ev" provides a repository that will give us a newer version of
	# qemu, which is required to avoid the "CPU feature arat not found" error with OpenStack images
	# running in our virtual machines
	yum install --assumeyes \
		epel-release centos-release-qemu-ev deltarpm
	yum upgrade --assumeyes
	yum install --assumeyes \
		bash-completion \
		virt-install cloud-utils ipmitool \
		python36-pip python36-devel libvirt-devel openssl-devel gcc

	m '[hypervisor-root] Ensuring VirtualBMC service is installed and configured'

	# Unfortunately we must run vbmcd as root. It cannot run on the "hypervisor" user because
	# SELinux won't let it delegate to "/usr/libexec/qemu-kvm" from within systemd. However, it is
	# possible for root to access any user's libvirt session via their socket. The libvirt
	# connection string would be:
	#
	#   qemu:///session?socket=$XDG_RUNTIME_DIR/libvirt/libvirt-sock
	#
	# See: https://libvirt.org/remote.html
	#
	# (Side note: CentOS purposely disables systemd user units, so we would need a root systemd unit
	# even if we use "[Service] User=hypervisor".)

	# VirtualBMC requirements: python36-devel libvirt-devel openssl-devel gcc
	pip3 install virtualbmc==$(c "$VIRTUALBMC_VERSION")

	if [ ! -f /etc/virtualbmc/virtualbmc.conf ]; then
	 	mkdir --parents /etc/virtualbmc/
		mkdir --parents /var/log/virtualbmc/

	 	cat > /etc/virtualbmc/virtualbmc.conf <<- _EOT
			# See: https://github.com/openstack/virtualbmc/blob/master/virtualbmc/config.py
			[default]
			config_dir= /etc/virtualbmc/
	
			[log]
			logfile = /var/log/virtualbmc/virtualbmc.log
			debug = true
		_EOT
	fi

	if [ ! -f /etc/systemd/system/vbmcd.service ]; then
		cat > /etc/systemd/system/vbmcd.service <<- _EOT
			[Unit]
			AssertPathExists=/usr/local/bin/vbmcd
			ProtectSystem=strict
	
			[Service]
			ExecStart=/usr/local/bin/vbmcd --foreground
			Environment=VIRTUALBMC_CONFIG=/etc/virtualbmc/virtualbmc.conf
			ReadWritePaths=/etc/virtualbmc/
			ReadWritePaths=/var/log/virtualbmc/
	
			Restart=always
			ProtectKernelModules=true
			ProtectControlGroup=true
			ProtectKernelTunables=true
			ProtectSystem=strict
	
			# Note: CentOS 7 ignores "ProtectSystem=strict"
	
			[Install]
			WantedBy=default.target
		_EOT

		chmod 0644 /etc/systemd/system/vbmcd.service
		systemctl daemon-reload
	 	systemctl start vbmcd
	 	systemctl enable vbmcd
	 fi

	m '[hypervisor-root] Ensuring libvirt networks and bridges are configured'

	if [ ! -f /etc/sysconfig/network-scripts/ifcfg-os-ctlplane ]; then
		cat > /etc/sysconfig/network-scripts/ifcfg-os-ctlplane <<- _EOT
			DEVICE=os-ctlplane
			TYPE=Bridge
			ONBOOT=yes
			BOOTPROTO=none
			DELAY=0
		_EOT

		cat > /etc/sysconfig/network-scripts/ifcfg-$C_HYPERVISOR_OPENSTACK_CONTROL_PLANE_INTERFACE <<- _EOT
			DEVICE=$EQ_HYPERVISOR_OPENSTACK_CONTROL_PLANE_INTERFACE
			TYPE=Ethernet
			BRIDGE=os-ctlplane
			ONBOOT=yes
			BOOTPROTO=none
			DELAY=0
		_EOT

		systemctl restart network.service
	fi

	# TODO: brctl works but won't survive reboots
	#brctl addbr os-ctlplane || true
	#brctl addif os-ctlplane $C_HYPERVISOR_OPENSTACK_CONTROL_PLANE_INTERFACE || true
	#brctl stp os-ctlplane on
	#ip link set os-ctlplane up

	# TODO: NetworkManager bridge does not work
	#nmcli connection delete os-ctlplane || true
	#nmcli connection delete $C_HYPERVISOR_OPENSTACK_CONTROL_PLANE_INTERFACE || true
	#nmcli connection add \
	#	con-name os-ctlplane \
	#	type bridge \
	#	ifname os-ctlplane
	#nmcli connection add \
	#	con-name $C_HYPERVISOR_OPENSTACK_CONTROL_PLANE_INTERFACE \
	#	type ethernet \
	#	ifname $C_HYPERVISOR_OPENSTACK_CONTROL_PLANE_INTERFACE \
	#	master os-ctlplane

	function kvm_enable_bridge () {
		# Allow the bridge to be used by libvirt
		if ! grep --quiet --line-regexp "allow \$1" /etc/qemu-kvm/bridge.conf; then
			echo "allow \$1" >> /etc/qemu-kvm/bridge.conf
		fi
	}

	function virsh_enable_network () {
		if ! virsh net-uuid "\$1" > /dev/null 2>&1; then
			virsh net-define "\$HOME/libvirt/networks/\$1.xml"
		fi
		virsh net-autostart "\$1"
		virsh net-start "\$1" || true
	}

	kvm_enable_bridge vm-ctlplane
	virsh_enable_network virtual-machine-control-plane
	kvm_enable_bridge os-ctlplane
	virsh_enable_network openstack-control-plane

	m "[hypervisor-root] Ensuring user \"hypervisor\" exists and is configured"

	if ! id --user hypervisor > /dev/null; then
		useradd hypervisor
	fi

	echo $(c "$PASSWORD") | passwd --stdin hypervisor

	echo "hypervisor ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/hypervisor

	# User "qemu" will need access to our libvirt images
	chmod a+rx /home/hypervisor/

EOT
)"

m "[hypervisor] Ensuring keypair authorization for user \"hypervisor\""

"$ROOT/utils/ensure-ssh-key-authorized" hypervisor@hypervisor \
sshpass -p "$PASSWORD" ssh "hypervisor@$HYPERVISOR_IP_ADDRESS"

"$ROOT/utils/ensure-ssh-config" hypervisor "$HYPERVISOR_IP_ADDRESS" hypervisor hypervisor@hypervisor

"$ROOT/ssh" hypervisor "$(cat <<- EOT

	set -e
	CYAN='\033[0;36m'
	RESET='\033[0m'
	function m () { echo -e "\$CYAN\$1\$RESET"; }

	m '[hypervisor] Ensuring OpenStack client is installed'
	pip3 install --user \
		python-openstackclient==$(c "$PYTHON_OPENSTACKCLIENT_VERSION")

EOT
)"
